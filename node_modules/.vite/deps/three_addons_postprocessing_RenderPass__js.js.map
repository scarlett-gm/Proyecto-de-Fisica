{
  "version": 3,
  "sources": ["../../three/examples/jsm/postprocessing/RenderPass.js"],
  "sourcesContent": ["import {\r\n\tColor\r\n} from 'three';\r\nimport { Pass } from './Pass.js';\r\n\r\n/**\r\n * This class represents a render pass. It takes a camera and a scene and produces\r\n * a beauty pass for subsequent post processing effects.\r\n *\r\n * ```js\r\n * const renderPass = new RenderPass( scene, camera );\r\n * composer.addPass( renderPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n */\r\nclass RenderPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new render pass.\r\n\t *\r\n\t * @param {Scene} scene - The scene to render.\r\n\t * @param {Camera} camera - The camera.\r\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\r\n\t * for all objects in the scene.\r\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\r\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\r\n\t */\r\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scene to render.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t */\r\n\t\tthis.scene = scene;\r\n\r\n\t\t/**\r\n\t\t * The camera.\r\n\t\t *\r\n\t\t * @type {Camera}\r\n\t\t */\r\n\t\tthis.camera = camera;\r\n\r\n\t\t/**\r\n\t\t * The override material. If set, this material is used\r\n\t\t * for all objects in the scene.\r\n\t\t *\r\n\t\t * @type {?Material}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\t\t/**\r\n\t\t * The clear color of the render pass.\r\n\t\t *\r\n\t\t * @type {?(number|Color|string)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.clearColor = clearColor;\r\n\r\n\t\t/**\r\n\t\t * The clear alpha of the render pass.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.clearAlpha = clearAlpha;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to perform a clear operation by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.clear = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clearDepth = false;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to disable the swap.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.needsSwap = false;\r\n\t\tthis._oldClearColor = new Color();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a beauty pass with the configured scene and camera.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet oldClearAlpha, oldOverrideMaterial;\r\n\r\n\t\tif ( this.overrideMaterial !== null ) {\r\n\r\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\r\n\r\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearColor !== null ) {\r\n\r\n\t\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearAlpha !== null ) {\r\n\r\n\t\t\toldClearAlpha = renderer.getClearAlpha();\r\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearDepth == true ) {\r\n\r\n\t\t\trenderer.clearDepth();\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\r\n\r\n\t\tif ( this.clear === true ) {\r\n\r\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// restore\r\n\r\n\t\tif ( this.clearColor !== null ) {\r\n\r\n\t\t\trenderer.setClearColor( this._oldClearColor );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearAlpha !== null ) {\r\n\r\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.overrideMaterial !== null ) {\r\n\r\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderPass };\r\n"],
  "mappings": ";;;;;;;;;AAgBA,IAAM,aAAN,cAAyB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY7B,YAAa,OAAO,QAAQ,mBAAmB,MAAM,aAAa,MAAM,aAAa,MAAO;AAE3F,UAAM;AAON,SAAK,QAAQ;AAOb,SAAK,SAAS;AASd,SAAK,mBAAmB;AAQxB,SAAK,aAAa;AAQlB,SAAK,aAAa;AAQlB,SAAK,QAAQ;AAQb,SAAK,aAAa;AAQlB,SAAK,YAAY;AACjB,SAAK,iBAAiB,IAAI,MAAM;AAAA,EAEjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAQ,UAAU,aAAa,YAA0C;AAExE,UAAM,eAAe,SAAS;AAC9B,aAAS,YAAY;AAErB,QAAI,eAAe;AAEnB,QAAK,KAAK,qBAAqB,MAAO;AAErC,4BAAsB,KAAK,MAAM;AAEjC,WAAK,MAAM,mBAAmB,KAAK;AAAA,IAEpC;AAEA,QAAK,KAAK,eAAe,MAAO;AAE/B,eAAS,cAAe,KAAK,cAAe;AAC5C,eAAS,cAAe,KAAK,YAAY,SAAS,cAAc,CAAE;AAAA,IAEnE;AAEA,QAAK,KAAK,eAAe,MAAO;AAE/B,sBAAgB,SAAS,cAAc;AACvC,eAAS,cAAe,KAAK,UAAW;AAAA,IAEzC;AAEA,QAAK,KAAK,cAAc,MAAO;AAE9B,eAAS,WAAW;AAAA,IAErB;AAEA,aAAS,gBAAiB,KAAK,iBAAiB,OAAO,UAAW;AAElE,QAAK,KAAK,UAAU,MAAO;AAG1B,eAAS,MAAO,SAAS,gBAAgB,SAAS,gBAAgB,SAAS,gBAAiB;AAAA,IAE7F;AAEA,aAAS,OAAQ,KAAK,OAAO,KAAK,MAAO;AAIzC,QAAK,KAAK,eAAe,MAAO;AAE/B,eAAS,cAAe,KAAK,cAAe;AAAA,IAE7C;AAEA,QAAK,KAAK,eAAe,MAAO;AAE/B,eAAS,cAAe,aAAc;AAAA,IAEvC;AAEA,QAAK,KAAK,qBAAqB,MAAO;AAErC,WAAK,MAAM,mBAAmB;AAAA,IAE/B;AAEA,aAAS,YAAY;AAAA,EAEtB;AAED;",
  "names": []
}
