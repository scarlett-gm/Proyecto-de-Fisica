{
  "version": 3,
  "sources": ["../../three/examples/jsm/postprocessing/Pass.js"],
  "sourcesContent": ["import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tOrthographicCamera,\r\n\tMesh\r\n} from 'three';\r\n\r\n/**\r\n * Abstract base class for all post processing passes.\r\n *\r\n * This module is only relevant for post processing with {@link WebGLRenderer}.\r\n *\r\n * @abstract\r\n */\r\nclass Pass {\r\n\r\n\t/**\r\n\t * Constructs a new pass.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPass = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass is processed by the composer.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.enabled = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass indicates to swap read and write buffer after rendering.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass clears its buffer before rendering\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clear = false;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\r\n\t\t * pass chain gets automatically rendered to screen, no matter how this property is configured.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the pass.\r\n\t *\r\n\t * @abstract\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The width to set.\r\n\t */\r\n\tsetSize( /* width, height */ ) {}\r\n\r\n\t/**\r\n\t * This method holds the render logic of a pass. It must be implemented in all derived classes.\r\n\t *\r\n\t * @abstract\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the pass is no longer used in your app.\r\n\t *\r\n\t * @abstract\r\n\t */\r\n\tdispose() {}\r\n\r\n}\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nclass FullscreenTriangleGeometry extends BufferGeometry {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _geometry = new FullscreenTriangleGeometry();\r\n\r\n\r\n/**\r\n * This module is a helper for passes which need to render a full\r\n * screen effect which is quite common in context of post processing.\r\n *\r\n * The intended usage is to reuse a single full screen quad for rendering\r\n * subsequent passes by just reassigning the `material` reference.\r\n *\r\n * This module can only be used with {@link WebGLRenderer}.\r\n *\r\n * @augments Mesh\r\n */\r\nclass FullScreenQuad {\r\n\r\n\t/**\r\n\t * Constructs a new full screen quad.\r\n\t *\r\n\t * @param {?Material} material - The material to render te full screen quad with.\r\n\t */\r\n\tconstructor( material ) {\r\n\r\n\t\tthis._mesh = new Mesh( _geometry, material );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the instance is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._mesh.geometry.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the full screen quad.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t */\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this._mesh, _camera );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The quad's material.\r\n\t *\r\n\t * @type {?Material}\r\n\t */\r\n\tget material() {\r\n\r\n\t\treturn this._mesh.material;\r\n\r\n\t}\r\n\r\n\tset material( value ) {\r\n\r\n\t\tthis._mesh.material = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Pass, FullScreenQuad };\r\n"],
  "mappings": ";;;;;;;;AAcA,IAAM,OAAN,MAAW;AAAA;AAAA;AAAA;AAAA,EAKV,cAAc;AASb,SAAK,SAAS;AAQd,SAAK,UAAU;AAQf,SAAK,YAAY;AAQjB,SAAK,QAAQ;AASb,SAAK,iBAAiB;AAAA,EAEvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAA+B;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAchC,SAAyE;AAExE,YAAQ,MAAO,4DAA6D;AAAA,EAE7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU;AAAA,EAAC;AAEZ;AAIA,IAAM,UAAU,IAAI,mBAAoB,IAAK,GAAG,GAAG,IAAK,GAAG,CAAE;AAI7D,IAAM,6BAAN,cAAyC,eAAe;AAAA,EAEvD,cAAc;AAEb,UAAM;AAEN,SAAK,aAAc,YAAY,IAAI,uBAAwB,CAAE,IAAK,GAAG,GAAG,IAAK,IAAK,GAAG,GAAG,IAAK,CAAE,GAAG,CAAE,CAAE;AACtG,SAAK,aAAc,MAAM,IAAI,uBAAwB,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAE,GAAG,CAAE,CAAE;AAAA,EAEhF;AAED;AAEA,IAAM,YAAY,IAAI,2BAA2B;AAcjD,IAAM,iBAAN,MAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpB,YAAa,UAAW;AAEvB,SAAK,QAAQ,IAAI,KAAM,WAAW,QAAS;AAAA,EAE5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AAET,SAAK,MAAM,SAAS,QAAQ;AAAA,EAE7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAQ,UAAW;AAElB,aAAS,OAAQ,KAAK,OAAO,OAAQ;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AAEd,WAAO,KAAK,MAAM;AAAA,EAEnB;AAAA,EAEA,IAAI,SAAU,OAAQ;AAErB,SAAK,MAAM,WAAW;AAAA,EAEvB;AAED;",
  "names": []
}
